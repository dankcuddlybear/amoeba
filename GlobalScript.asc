// main global script file
import InventoryItem*ItemGiven; // Item given to a character

// called when the game starts, before the first room is loaded
function game_start() {aMusic.Play();}

// put anything you want to happen every game cycle in here
function repeatedly_execute() {}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() {}

void ShowOptions() {
  Verbs.UpdateActionBar();
  OptionGui.ShowOptions();
}

// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) {
  if (keycode == eKeyF5) ShowOptions();
  if (keycode == eKeyCtrlC || keycode == eKeyCtrlQ) gQuit.Visible=true;  // Ctrl-C or CTRL-Q QUIT
  if (keycode == eKeyF12)   SaveScreenShot("scrnshot.pcx");  // F12
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) Debug(3,0); // Ctrl-X, teleport to ro 
}

// called when a mouse button is clicked. button is either LEFT or RIGHT
function on_mouse_click(MouseButton button) {}

function on_event(EventType event, int data) {
  if (event==eEventLeaveRoom)
  if (event==eEventRestoreGame) Verbs.Localize();
  if (event==eEventEnterRoomBeforeFadein || event==eEventRestoreGame) player.PlaceOnWalkableArea();
}

// Begin of GUI handling
function Action_Click(GUIControl *control, MouseButton button) {
  Verbs.SetAction(Verbs.GetButtonAction(control.AsButton));
} function ScrollInv_Click(GUIControl *control, MouseButton button) {
  if (control == btnInvUp) invMain.ScrollUp();
  else invMain.ScrollDown();  
} function btnShowOptions_OnClick(GUIControl *control, MouseButton button) {ShowOptions();}
function btnOptions_OnClick(GUIControl *control, MouseButton button) {OptionGui.OnClick(control, button);}
function btnOptions_OnSliderChange(GUIControl *control) {OptionGui.OnSliderChange(control);}
// End of GUI handling

/* Character, Object, Hotspot full blown SAMPLE
function cChar_AnyClick() {
  // WALK TO
  if (Verbs.UsedAction(eGA_WalkTo)) {
    Verbs.GoTo();
  }
  // TALK TO 
  else if (Verbs.UsedAction(eGA_TalkTo)) {
    Verbs.Unhandled();
  }
  // LOOK AT
  else if (Verbs.UsedAction(eGA_LookAt)) {
    Verbs.Unhandled();
  }
  // OPEN
  else if (Verbs.UsedAction(eGA_Open)) {
    Verbs.Unhandled();
  }  
  // CLOSE
  else if (Verbs.UsedAction(eGA_Close)) {
    Verbs.Unhandled();
  }
  // USE
  else if (Verbs.UsedAction(eGA_Use)) {
    Verbs.Unhandled();
  }
  // Push
  else if (Verbs.UsedAction(eGA_Push)) {
    Verbs.Unhandled();
  }
  // Pull
  else if (Verbs.UsedAction(eGA_Pull)) {
    Verbs.Unhandled();
  } 
  // PICKUP
  else if (Verbs.UsedAction(eGA_PickUp)) {
    Verbs.Unhandled();
  }
  // GIVE TO (characters only)
  else if (Verbs.UsedAction(eGA_GiveTo)) {
    Verbs.Unhandled();
  }  
  //USE INV
  else if (Verbs.UsedAction(eGA_UseInv)) {
    Verbs.Unhandled();
  }
  else Verbs.Unhandled();
}
*/

/* Inventory SAMPLE
  // LOOK AT
  else if (Verbs.UsedAction(eGA_LookAt)) {
    Unhandled();
  }
  // USE
  else if (Verbs.UsedAction(eGA_Use)) {
    Unhandled();
  }
  // Push
  else if (Verbs.UsedAction(eGA_Push)) {
    Unhandled();
  }
  // Pull
  else if (Verbs.UsedAction(eGA_Pull)) {
    Unhandled();
  }   
  //USE INV
  else if (Verbs.UsedAction(eGA_UseInv)) {
    Unhandled();
  }
  else Unhandled();

*/

// [INVENTORY FUNCTIONS]
// Room 1
function iMoney_Look() {player.Say("Ah yes, this will go a long way in helping out with the ol' cash situation...");}
function iFork_Look() {player.Think("I bet I could use this to pole-jump through the kitchen window.");}
function iFork_Interact() {CallRoomScript(0);}
// Room 2
function iSecretIngredient_Look() {player.Say("\"Add one teaspoon to 1kg of any food.\"");
  player.Say("\"WARNING: Do not mix with alcohol. Do not drive or operate heavy machinery.\"");
  player.Say("\"May cause drowsiness, constipation, hypnosis, reduced heart rate and hallucinations.\"");
  player.Think("What the fuck is this stuff?");
}
function iKey_Look() {player.Think("I think this is the key to King Krab's office.");}
function iKey_Interact() {
  player.Think("I'm too small to open the door. Gonna have to get somebody else to unlock it for me...");
}
// Room 3
function iPictureBroken_Look() {GotPassword = true;
  player.Think("That's King Krab's daughter, Midget Crab, as a kid.");
  player.Think("There are 5 candles in the background, and the top left corner says \"03/02/2011\"");
}
function iBall_Look() {player.Think("It's a stress ball. Perfect for squeezing and throwing.");}
function iBall_Interact() {if (player.Room == 3) CallRoomScript(0);
  else player.Think("This isn't the right place to throw it.");
}
function iRedWine_Look() {player.Think("It's a bottle of Château Montrose 2018.");}
function iRedWine_Interact() {player.Think("There'll be time for drinking later once I have that recipe!");}
function iWhiteWine_Look() {player.Think("It's a bottle of Sauvignon Blanc 2021.");}
function iWhiteWine_Interact() {iRedWine_Interact();}


// [CHARACTER FUNCTIONS]
function cFishEatingSoup_Talk() {dFishEatingSoup.Start();}
function cFishEatingSoup_Look() {player.Think("This bloke stinks. I don't think he's ever showered once in his life.");}
function cFishChef_Look() {if (ChefIsPassedOut) player.Think("Chef is out cold!");
  else player.Think("Chef is right off his head!");
} function cFishChef_Talk() {if (ChefIsPassedOut) player.Think("Chef is out cold!"); else CallRoomScript(1);}
function cFishChef_AnyClick() {if (Verbs.UsedAction(eGA_GiveTo) && player.ActiveInventory == iKey) CallRoomScript(1);}

// [DIALOG FUNCTIONS]
function dialog_request(int value) {
  if (value == 0) cFishChef.FaceCharacter(player);
  else if (value == 1) { // The chef will leave the kitchen to look for the non-paying customer
    cFishChef.Walk(60, 170, eBlock, eAnywhere);
    cFishChef.Walk(0, cFishChef.y, eBlock);
    cFishChef.ChangeRoom(1);
  }
}
